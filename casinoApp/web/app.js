// web/app.js ‚Äî –ø–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª, OU-–ø—Ä–æ—Ü–µ—Å—Å, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Y –Ω–∞ —Ä–∞—É–Ω–¥, —à—Ç–æ—Ä–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É

// –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if (window.__APP_INITED__) {
  console.warn('App already inited ‚Äî skip');
} else {
  window.__APP_INITED__ = true;
  window.addEventListener('load', init);
}

async function init() {
  // -------- DOM ----------
  const cvs = document.getElementById('canvas');
  const ctx = cvs.getContext('2d');
  const statusEl = document.getElementById('status');
  const controls = document.getElementById('controls');
  const btnUp = document.getElementById('btn-up');
  const btnDown = document.getElementById('btn-down');

  // -------- —Ä–∞–∑–º–µ—Ä—ã ----------
  function sizeCanvas() {
    const rect = cvs.parentElement.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;
    cvs.width  = Math.floor(rect.width * dpr);
    cvs.height = Math.floor(420 * dpr);
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
  }
  sizeCanvas();
  window.addEventListener('resize', sizeCanvas);

  // -------- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞ ----------
  const N = 300;             // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Ç–æ—á–µ–∫ (—á–µ–º –±–æ–ª—å—à–µ ‚Äî —Ç–µ–º –ø–ª–∞–≤–Ω–µ–µ)
  const STEP_MS = 220;       // –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ (–º—Å)
  const COVER_AT_SEC = 15;   // —Å–µ–∫—É–Ω–¥–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —à—Ç–æ—Ä–∫–∏
  const PADDING_X = 8;       // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞
  const DRAW_SMOOTH = 5;     // —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π

  // –ü—Ä–æ—Ü–µ—Å—Å –û—Ä–Ω—à—Ç–µ–π–Ω–∞‚Äì–£–ª–µ–Ω–±–µ–∫–∞ ‚Äî –≥–ª–∞–¥–∫–∏–π ¬´—Ä—ã–Ω–æ–∫¬ª
  const OU = {
    mu: 100,       // —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    theta: 0.06,   // –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ä–µ–¥–Ω–µ–º—É (0..1)
    sigma: 0.05,   // –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    maxStep: 0.10, // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–∞—á–∫–∞ –∑–∞ —Ç–∏–∫ (–∞–Ω—Ç–∏-–∏–≥–ª—ã)
  };

  // –ú–∞—Å—à—Ç–∞–± Y (—Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞ —Ä–∞—É–Ω–¥ –∏ –ø–ª–∞–≤–Ω–æ –≤–µ–¥—ë–º –∫ —Ü–µ–ª–µ–≤–æ–º—É)
  const SCALE_PAD = 0.10;     // –∑–∞–ø–∞—Å –∫ min/max
  const SCALE_SMOOTH = 0.06;  // —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
  const SCALE_MAX_STEP = 0.15;// –º–∞–∫—Å–∏–º—É–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞ –∫–∞–¥—Ä (–≤ –µ–¥. —Ü–µ–Ω—ã)

  // -------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----------
  let lastOutcome = null;
  let showCover = false;
  let paused = false;
  let bias = 0;                    // –ª—ë–≥–∫–∏–π –¥—Ä–µ–π—Ñ –ø–æ—Å–ª–µ settle/close

  const buf = genInitialSeries(N); // –∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä –¥–ª–∏–Ω–æ–π N
  let head = 0;
  // –º–∞—Å—à—Ç–∞–± (–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ —Ä–∞—É–Ω–¥–∞)
  let viewMin = 99, viewMax = 101;     // —Ç–µ–∫—É—â–∏–µ –≤–∏–¥–∏–º—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
  let targetMin = 99, targetMax = 101; // —Ü–µ–ª–µ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã

  // ===== –≥–µ–Ω–µ—Ä–∞—Ü–∏—è =====
  function genInitialSeries(n) {
    const arr = [];
    let x = OU.mu;
    for (let i = 0; i < n; i++) {
      x = ouNext(x);
      arr.push(x);
    }
    return arr;
  }

  function ouNext(x) {
    // dX = theta*(mu - x) + sigma*epsilon + bias
    const eps = (Math.random() * 2 - 1); // U(-1,1) –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª–∞–¥–∫–æ
    let d = OU.theta * (OU.mu - x) + OU.sigma * eps + bias * 0.05;
    if (d > OU.maxStep) d = OU.maxStep;
    if (d < -OU.maxStep) d = -OU.maxStep;
    return x + d;
  }

  // –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª—å—Ü–µ–≤–æ–º—É –±—É—Ñ–µ—Ä—É
  const at = (i) => buf[(head + i) % N];            // i: 0..N-1 (0 ‚Äî —Å–ª–µ–≤–∞)
  const setLast = (v) => { buf[(head + N - 1) % N] = v; };

  // —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –ª–∏–Ω–∏–∏
  function smoothAt(i) {
    let sum = 0;
    for (let k = 0; k < DRAW_SMOOTH; k++) {
      sum += at((i - k + N) % N);
    }
    return sum / DRAW_SMOOTH;
  }

  function stepForward() {
    if (paused) return;
    const next = ouNext(at(N - 1));
    head = (head + 1) % N;   // —Å–¥–≤–∏–≥ –æ–∫–Ω–∞ –Ω–∞ 1 —Ç–æ—á–∫—É
    setLast(next);           // –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–æ–≤—É—é –ø—Ä–∞–≤—É—é —Ç–æ—á–∫—É
  }

  // ===== –º–∞—Å—à—Ç–∞–± =====
  function recomputeTargetScale() {
    let mi = Infinity, ma = -Infinity;
    for (let i = 0; i < N; i++) {
      const v = at(i);
      if (v < mi) mi = v;
      if (v > ma) ma = v;
    }
    if (mi === ma) { mi -= 1; ma += 1; }
    const pad = Math.max(0.5, (ma - mi) * SCALE_PAD);
    return [mi - pad, ma + pad];
  }

  function approach(a, b, maxStep) {
    const d = b - a;
    if (Math.abs(d) <= maxStep) return b;
    return a + Math.sign(d) * maxStep;
  }

  function smoothScale() {
    // –≤–µ–¥—ë–º —Ç–µ–∫—É—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫ —Ü–µ–ª–µ–≤—ã–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —à–∞–≥–∞
    viewMin = approach(viewMin + (targetMin - viewMin) * SCALE_SMOOTH, targetMin, SCALE_MAX_STEP);
    viewMax = approach(viewMax + (targetMax - viewMax) * SCALE_SMOOTH, targetMax, SCALE_MAX_STEP);
    if (viewMax - viewMin < 1) viewMax = viewMin + 1; // –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω—É–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  }

  // ===== –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ =====
  function drawGrid(w, h) {
    ctx.fillStyle = '#0f1115';
    ctx.fillRect(0, 0, w, h);
    ctx.strokeStyle = '#1f2937';
    ctx.lineWidth = 1;
    for (let i = 1; i < 6; i++) {
      const y = (h / 6) * i;
      ctx.beginPath(); ctx.moveTo(0, y); ctx.lineTo(w, y); ctx.stroke();
    }
  }

  const lerp = (a,b,t)=>a+(b-a)*t;

  // t ‚Äî –¥–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞ (0..1)
  function draw(t = 0) {
    const w = cvs.clientWidth, h = cvs.clientHeight;

    drawGrid(w, h);
    smoothScale();

    // –ª–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ ‚Äî –æ–±–ª–∞—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∞, –ø—Ä–∞–≤–∞—è ‚Äî —à—Ç–æ—Ä–∫–∞
    const vpX = 0;
    const vpW = Math.floor(w / 2);

    // —à–∏—Ä–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –ø–ª–∞–≤–Ω—ã–π —Å–¥–≤–∏–≥ –≤–ª–µ–≤–æ
    const segW = (vpW - 2 * PADDING_X) / (N - 1);
    const xShift = t * segW;

    ctx.strokeStyle = '#36a3ff';
    ctx.lineWidth = 2;
    ctx.beginPath();

    // —Ä–∏—Å—É–µ–º N-1 —Å–µ–≥–º–µ–Ω—Ç (–Ω–µ –∑–∞–º—ã–∫–∞–µ–º –≤ –∫–æ–ª—å—Ü–æ ‚Äî –±–µ–∑ —Å—Ç—ã–∫–æ–≤—ã—Ö —Å–∫–∞—á–∫–æ–≤)
    for (let i = 0; i < N - 1; i++) {
      const cur = smoothAt(i);
      const nxt = smoothAt(i + 1);
      const yVal = lerp(cur, nxt, t);

      const x = vpX + PADDING_X + i * segW - xShift;
      const y = h - ((yVal - viewMin) / (viewMax - viewMin)) * (h - 10) - 5;

      if (i === 0) ctx.moveTo(x, y); else ctx.lineTo(x, y);
    }
    ctx.stroke();

    // –ø–æ–¥–ø–∏—Å—å –∏—Å—Ö–æ–¥–∞
    if (lastOutcome) {
      ctx.fillStyle = lastOutcome === 'up' ? '#1f9d55' : '#e53e3e';
      ctx.font = 'bold 16px system-ui';
      ctx.fillText(lastOutcome === 'up' ? 'üìà UP' : 'üìâ DOWN', 8, 22);
    }

    // –ø—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ ‚Äî —á—ë—Ä–Ω–∞—è —à—Ç–æ—Ä–∫–∞ —Å ¬´?¬ª
    if (showCover) {
      const halfX = Math.floor(w / 2);
      ctx.save();
      ctx.fillStyle = '#000';
      ctx.fillRect(halfX, 0, w - halfX, h);
      ctx.fillStyle = '#e5e7eb';
      ctx.font = 'bold 72px system-ui';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.shadowColor = 'rgba(0,0,0,0.6)';
      ctx.shadowBlur = 8;
      ctx.fillText('?', halfX + (w - halfX) / 2, h / 2);
      ctx.shadowBlur = 0;
      ctx.restore();
    }
  }

  // ===== API (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏) =====
  async function fetchState() {
    const res = await fetch('/api/rounds/state', { cache: 'no-store' });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    return res.json();
  }

  btnUp.addEventListener('click', async () => {
    const r = await fetch('/api/rounds/bet', { method: 'POST' });
    const j = await r.json();
    controls.style.display = 'none';
    statusEl.textContent = j.ok ? '–í—ã –≤—ã–±—Ä–∞–ª–∏: üìà –í–≤–µ—Ä—Ö' : '–ü—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç';
  });
  btnDown.addEventListener('click', async () => {
    const r = await fetch('/api/rounds/bet', { method: 'POST' });
    const j = await r.json();
    controls.style.display = 'none';
    statusEl.textContent = j.ok ? '–í—ã –≤—ã–±—Ä–∞–ª–∏: üìâ –í–Ω–∏–∑' : '–ü—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç';
  });

  // ===== –æ–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—É–Ω–¥–∞ =====
  let lastRoundId = null;
  async function poll() {
    try {
      const st = await fetchState();
      const elapsed = st.duration - st.timeleft;

      showCover = (st.status !== 'settled') && (elapsed >= COVER_AT_SEC);
      paused = showCover && st.status === 'betting';

      if (lastRoundId !== st.id) {
        // –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–±
        lastRoundId = st.id;
        lastOutcome = null;
        showCover = false;
        paused = false;
        bias = 0;

        controls.style.display = 'flex';

        [targetMin, targetMax] = recomputeTargetScale();
        viewMin = targetMin;
        viewMax = targetMax;

        statusEl.textContent = `–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ #${st.id}`;
      }

      if (st.status === 'betting') {
        statusEl.textContent = `–†–∞—É–Ω–¥ #${st.id} ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å ${st.timeleft}s. –î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É!`;
      } else if (st.status === 'closed') {
        bias = (st.outcome === 'up') ? +1 : -1; // —Å–∫—Ä—ã—Ç—ã–π –¥—Ä–µ–π—Ñ –∫ –∏—Å—Ö–æ–¥—É
        statusEl.textContent = `–†–∞—É–Ω–¥ #${st.id} ‚Äî —Å—Ç–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã, –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...`;
      } else if (st.status === 'settled') {
        lastOutcome = st.outcome;
        bias = (st.outcome === 'up') ? +1 : -1; // –Ω–µ–±–æ–ª—å—à–æ–π —Ç—Ä–µ–Ω–¥ –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        showCover = false;
        paused = false;
        statusEl.textContent = `–†–∞—É–Ω–¥ #${st.id} –∑–∞–≤–µ—Ä—à—ë–Ω: ${st.outcome === 'up' ? 'üìà –≤–≤–µ—Ä—Ö' : 'üìâ –≤–Ω–∏–∑'}.`;
      } else {
        statusEl.textContent = `–°—Ç–∞—Ç—É—Å: ${st.status}`;
      }
    } catch {
      statusEl.textContent = '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
    } finally {
      setTimeout(poll, 1000);
    }
  }

  // ===== –≥–ª–∞–≤–Ω—ã–π –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª =====
  let acc = 0;                    // –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞
  let lastTs = performance.now(); // –≤—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–¥—Ä–∞

  function update(now) {
    const dt = now - lastTs;
    lastTs = now;

    if (!paused) acc += dt;

    // –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ STEP_MS
    while (!paused && acc >= STEP_MS) {
      acc -= STEP_MS;
      stepForward();
    }

    // —Ñ–∞–∑–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (0..1) ‚Äî –Ω–∞—Å–∫–æ–ª—å–∫–æ ¬´–ø—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å¬ª –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ
    const t = paused ? 0 : (acc / STEP_MS);

    draw(t);
    requestAnimationFrame(update);
  }

  // —Å—Ç–∞—Ä—Ç
  [targetMin, targetMax] = recomputeTargetScale();
  viewMin = targetMin; viewMax = targetMax;

  poll();
  requestAnimationFrame(update);
}
